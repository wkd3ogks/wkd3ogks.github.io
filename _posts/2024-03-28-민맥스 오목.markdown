---
title:  "[JS] min max 알고리즘을 활용한 오목 AI"
date:   2024-03-28 15:20:00 +0900
categories: 자바스크립트
---

# Omok

## 🤿 프로젝트 소개
- min max 알고리즘을 활용한 오목 인공지능(4수까지 탐색)
- 웹워커와 캔버스, 그리고 자바스크립트를 이용.

## 🎢 진행 상황

- [x] 구현
- [x] worker를 9개 만들기
- [x] 점수 계산 방식 정리 및 정교화
- [x] 점수 계산 표시하기
- [x] 오프닝 룰 추가
- [x] ~~플레이어 삼삼(금수) 규칙 추가~~
- [ ] 코드 정리하기

## 📡 실행 주소

[https://wkd3ogks.github.io/Omok](https://wkd3ogks.github.io/Omok/)


## 🔑 핵심 개념

- min max 알고리즘
  - 최대 최소 전략을 사용하는 알고리즘(나는 점수가 최대가 되도록 하고 상대방은 최저가 되도록 한다)

- 알파 베타 가지치기
  - 게임이 끝나는 경우에 한해 가지 치기를 진행했다.

- 판 크기를 15 x 15에서 첫 수 기준 11 x 11만 탐색
  - 탐색 범위가 줄어들어 잘못된 결과가 나오는 경우가 종종 있지만 너무 느려 범위를 줄였다

- 오프닝룰
  - 초반 부분의 연산을 줄이고 의미있는 수를 강제하기 위해 추가했다.

- 웹 워커
  - 복잡한 계산으로 인한 브라우저가 멈추는 경우를 막기 위해 사용했다.
  - 9개의 웹 워커를 통해 오목판을 9등분한 후 min-max 알고리즘을 사용한다.

## 🔮 min max 평가 방식

- 5에 가까운 길이를 만들 수록 높은 점수를 부여한다.

- 가지치기를 위해 5를 만들면 최대값 혹은 최소값을 부여한다.

- 공격보다 수비에 더 큰 가중치(검은돌 1.3)를 가진다.

## ⚖ 게임 규칙

- 표준 고모쿠룰(6목 이상 장목 착수 가능, 승리조건은 아님)을 사용함.

- 오프닝룰: 26주형(26가지의 첫 3수의 패턴 중 하나로 시작해야함)
  
- 3-3 흑, 백 전체 허용(3-3 금지를 통한 탐색 범위 감소보다 허용하는 쪽이 더 빠를 것 같아서)

## ✨ 실행 화면

![omok](https://github.com/wkd3ogks/Omok/assets/91067033/4163a3df-3f74-4600-8148-cc546b15ab57)
